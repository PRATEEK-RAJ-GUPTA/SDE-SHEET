class Solution{
public:
        bool check(bool graph[101][101],int n,int color[],int col){
            for(int i=0;i<n;i++){
                if(i!=n and graph[i][n]==1 and color[i]==col){
                    return false;
                }
            }
            
            return true;
        }
public:
        bool func(bool graph[101][101],int m,int node,int n,int color[]){
            
            for(int i=1;i<=m;i++){
                if(check(graph,node,color,i))
                {
                    color[node]=i;
                    if(func(graph,m,node+1,n,color)==true) return true;
                    color[node]=0;
                }
            }
            
            return false;
        }
public:
        bool graphColoring(bool graph[101][101], int m, int n) {
        // your code here
        int color[n]={0};
        if(func(graph,m,0,n,color)==true) return true;
        else return false;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m, e;
        cin >> n >> m >> e;
        int i;
        bool graph[101][101];
        for (i = 0; i < n; i++) {
            memset(graph[i], 0, sizeof(graph[i]));
        }
        for (i = 0; i < e; i++) {
            int a, b;
            cin >> a >> b;
            graph[a - 1][b - 1] = 1;
            graph[b - 1][a - 1] = 1;
        }
        Solution ob;
        cout << ob.graphColoring(graph, m, n) << endl;
    }
    return 0;
}

// 